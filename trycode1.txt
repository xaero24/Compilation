func foo() return int 
{
   var x : char*;    /% x is a pointer to a character variable %/
   var z : int;
   var y    : int*; 
   var i : int;
   var m, n : bool;
   var c : char; 
   var r: real;
   var s : string[20];
   var a, b : string[100]; 
   var i: int;
   s="this is a string" ;     /% : simple string that contains 16 character %/
   a="this is no newline\n";  /% : string that contains 20 characters, including a backslash and a lowercase n%/
   b = "" ;                     /% : empty strings are okay %/
   y = null;   /% y is now the NULL pointer %/ 
   r=3.14;
   r=-34.9988;
   r=45.3E-23;
   r=-4E+2101;
   r= +.2E4;
   r=  4.e-67; 
 
   x = 5; 
   y = &x;     /% We take the address of x and assign it to y. As a result, y points to x, which is 5. %/
   x = 6;      /% y still points to x, which is 6 now %/
   z = ^y;     /% Dereference y, and assign to z the value that y points to (which is 6). %/ 

 /% this is my comment %/
 
	
    c = 'e';
    a[19] = 'f';
    a[4+2] = 'g';
    b = a;
    b[3] = c; 
	a = "test";   /% basically equivalent to a[0] = 't'; a[1] = 'e'; a[2] = 's'; a[3] = 't'; a[4] = '\0'; %/  
    i = |s|;      /% this assigns 100 to variable i, since the length operator returns the size of the character array %/ 
    x = 10;                /% lhs is variable identifier %/  
    b[10] = 10;     /% lhs is string element %/  
    ^a = 10;             /% lhs is dereferenced pointer %/
    return 0;  
} 
   
func ree(i, j, k : int) return int 
{ 
    func fee(l, m, n : int) return bool 
    { 
        return true; 
    }    
	return 0; 
} 
  
proc goo(i, j, k : int) 
{ 
    func fee(l, m, n : int) return bool 
    { 
        return true; 
    }  
	
} 


func foo2() return int { return 0; } 
func f234() return int { return 0;} 

func foo3(i, j, k : int; l, m, n : bool) return int { return 0; } 
proc fee(a, b : int)  { } 
func fei(a, b, c : int; d, e, f : bool; g, h : int) return int { return 0; } 


func foo_3(i, j, k : int) return int 
{ 
     
    func square(t : int) /% func/proc declarations %/ return int 
    { 
        var temp : int;  
        var total : int;    /% variable declarations %/ 
		temp = t*t; 
        if(3 > 2) 
         {  
		      /%...statements...%/ 
           i = 5; /% i has been declared above%/ 
		 }
     
		if(!false || 2 ) {
          j = 3; 
        } else { k = 4; } 
        while(true) {
          l = 2;
          k = l + j;
		}
		if((3+4)/3-5*2) i = 5; 
        if(true) { j = 3; } else x = x - 1; 
        while(false) x = x + 1; 
        for(i=0;i<50;i=i+ 1) y=i; 	
        foo();
		a = foo();
		return 0; 
    } 
    total = 1;                    /% statements %/   
	return total; 
} 
func foo4() return int 
{ 
    var x : int;    
	{        
	  var y : int;        
        x = 1;   
 	    y = 2; 
	    {
			 x = 2;   
		}  
		y = 3;    
    }   
	fee(x,y);
	return 0; 
}  
func foo5() return int 
{ 
    { 
        {}   /% empty code blocks are okay, although not very useful %/ 
    }     return 0; 
} 
   
  
 
 

func moo() return int { 
 var x : int;
 var y : int*;
 var x : char*;
 var y : string[10]; 
 var z : char; y = "foobar"; 
  x = 5; 
 y = &x; 
 x = 6; 
 x= &y[5];          /% x points to 'r' %/ 
 z = ^(x - 5);       /% z is 'f' %/ 
 y= "barfoo";       /% z is still 'f', but x now points to 'o' %/ 
 return 0;
}



func foo_2() return int { 
  var y: int;
  var x: int;
   x = 2;
    if(x>y) { 
      x=3;
	  x=x+ 1;
    }  
    if( x<y ) x=0;  
    if (x!=y ) 
    {  
      y = 2;
      x=x+ 2;
    } 
    else{ 
       y = 2;
      x=x+ 2;
    }
    if (x!=y )  y = 2;else x=x+ 2;
  
    return a; 
 } 


 
func foo_3() return int { if (true) { } return 0; } 


proc Main()
 {  
   var a : int;
   while (x==y) { y=y*2; x = x + 2; }
   while (x>y) y=y*2; 
   if (true) a=8;
   for(i=0;i<50; i = i + 1)  
   { 
      y=i ;
      x = x + 2;
   }  
  
} 

